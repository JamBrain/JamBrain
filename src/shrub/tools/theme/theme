#!/usr/bin/env php
<?php
const CONFIG_PATH = "../../";
const SHRUB_PATH = "../../src/";

include_once __DIR__."/".CONFIG_PATH."config.php";
require_once __DIR__."/".SHRUB_PATH."core/cli_root.php";	// Confirm CLI, Require ROOT
require_once __DIR__."/".SHRUB_PATH."core/db.php";
require_once __DIR__."/".SHRUB_PATH."core/core.php";
require_once __DIR__."/".SHRUB_PATH."constants.php";		// For the SH_TABLE constants. run gen.sh if not up-to-date.
require_once __DIR__."/".SHRUB_PATH."global/global.php";
require_once __DIR__."/".SHRUB_PATH."node/node.php";

require_once __DIR__."/".SHRUB_PATH."theme/theme.php";

if ( count($argv) < 2 ) {
	echo "Usage: ".$argv[0]." [command]\n";
	echo "\n";
	echo "  dupes         - Remove Duplicate Ideas\n";
	echo "  score         - Score Ideas\n";
//	echo "  promote       - Promote highest scored Ideas to Themes\n";
//	echo "  page          - Assign pages to themes\n";
	echo "  simple-vote # - Simple method to assign highest scored ideas to first # voting pages\n";
	echo "  calc #        - Calculate Score for Page \"#\" (starts at 1)\n";
	echo "  finalize #    - Take the top # themes and make a new (Final) Round\n";
//	echo "  calc-final    - Calculate the Final Score\n";
	echo "\n";
	die;
}

global_Load();

$ARG_COMMAND = array_shift($argv);


$root = nodeComplete_GetById(1);
$EVENT_NODE = intval($root["meta"]["featured"]);

if ( !$EVENT_NODE ) {
	echo "featured event is zero or not set ($EVENT_NODE)\n";
	die;
}
else {
	echo "EVENT_NODE: $EVENT_NODE\n";
}

$automatic = false;
$COMMAND = array_shift($argv);

if($COMMAND == "itsautomatic") {
	$COMMAND = array_shift($argv);
	$automatic = true;
}

function AreYouSure() {
	global $automatic;
	if(!$automatic) {
		print "\nAre you sure [type 'YES']? ";
		flush();
		$input = trim(fgets(STDIN));
		if ( $input != "YES" ) {
			print "Aborting...\n";
			exit(1);
		}
	}
}


if ( $COMMAND === "dupes" ) {
	print "\n*** WARNING ***\n\n";
	print "You are about to flag all duplicate ideas. This will destroy any manual changes.\n";
	AreYouSure();
	
	echo "Fetching Idea List...\n";

	$all_ideas = themeIdea_Get($EVENT_NODE);

	echo count($all_ideas) . " total.\n";

	// Generate Slugs
	$slug_ideas = [];
	$slug_parents = [];
	foreach ($all_ideas as $key => $theme) {
		$slug = coreSlugify_Name($theme);

		if ( isset($slug_ideas[$slug]) ) {
			$slug_parents[] = [
				'id' => $key,
				'parent' => $slug_ideas[$slug]['id']
			];
		}
		else {
			$slug_ideas[$slug] = [
				'id' => $key,
				'slug' => $slug
			];
		}
	}

	echo count($slug_ideas) . " with duplicates removed.\n";

	echo "Updating Parents...\n";
	foreach ($slug_parents as $theme) {
		themeIdea_SetParent($theme['id'], $theme['parent']);
	}

	echo "Done.\n";
	exit;
}
else if ( $COMMAND === "score" ) {
	print "\n*** WARNING ***\n\n";
	print "You are about to score the ideas.\n";
	AreYouSure();
	
	echo "Fetching Idea List...\n";

	$theme_list = themeIdeaVote_GetIdeas($EVENT_NODE);

	echo count($theme_list)." total\n";

	echo "Scoring...\n";

	// Stats //
	$min_votes = null;
	$max_votes = null;

	$min_score = null;
	$max_score = null;

	$mins = [ -1 => null, 0 => null, 1 => null ];
	$maxes = [ -1 => null, 0 => null, 1 => null ];
	
	$total_votes_count = 0;

	foreach ( $theme_list as $key => $value ) {
		$votes = themeIdeaVote_GetVotesForIdea($key);

		$votes_count = count($votes);
		$total_votes_count += $votes_count;
		if ( $min_votes === null || $votes_count < $min_votes )
			$min_votes = $votes_count;
		if ( $max_votes === null || $votes_count > $max_votes )
			$max_votes = $votes_count;

		$score_sum = 0;
		$scores = [ -1 => 0, 0 => 0, 1 => 0 ];

		for ($idx = 0; $idx < $votes_count; $idx++ ) {
			$score_sum += intval($votes[$idx]);
			$scores[$votes[$idx]]++;
		}

		if ( $min_score === null || $score_sum < $min_score )
			$min_score = $score_sum;
		if ( $max_score === null || $score_sum > $max_score )
			$max_score = $score_sum;

		foreach ( [1,0,-1] as $idx ) {
			if ( $mins[$idx] === null || $scores[$idx] < $mins[$idx] )
				$mins[$idx] = $scores[$idx];
			if ( $maxes[$idx] === null || $scores[$idx] > $maxes[$idx] )
				$maxes[$idx] = $scores[$idx];
		}

		// Minimum 10 votes before we score an entry //
		if ( $votes_count > 10 ) {
			$score = ($score_sum / $votes_count) * 200.0;
			themeIdea_SetScore($key,$score);
		}
	}

	echo "Total Votes: ".$total_votes_count."\n";
	echo "Votes: ".$min_votes." ... ".$max_votes."\n";
	echo "Scores: ".$min_score." ... ".$max_score."\n";
	foreach ( [1,0,-1] as $idx ) {
		echo "[".$idx."]: ".$mins[$idx]." ... ".$maxes[$idx]."\n";
	}
}
else if ( $COMMAND === "calc" ) {
	if ( count($argv) < 1 ) {
		print "Error: No page specified\n";
		exit(1);
	}

	$page = intval($argv[0]);

	if ( $page < 1 ) {
		print "Error: Invalid page"+$page+"\n";
		exit(1);
	}

	print "\n*** WARNING ***\n\n";
	print "You are about to Score Round ".$page."\n";
	AreYouSure();
	
	
	print "Fetching Themes...\n";

	$themes = themeList_GetByNode($EVENT_NODE, $page);

	print "Counting Scores...\n";
	$votes = [];
	foreach ( $themes as &$theme ) {
		$votes[$theme['id']] = themeListVote_GetScoreCounts($theme['id']);
		$sum = 0;
		$str = "";
		foreach ( $votes[$theme['id']] as $key => &$value ) {
			$sum += intval($key) * intval($value);
		}

		echo $sum."\t".$theme['theme']."\t\t\t(".implode(", ",$votes[$theme['id']]).")\n";

		$votes[$theme['id']]['sum'] = $sum;
	}

	print "\n*** WARNING ***\n\n";
	print "Commit these Scores to Round ".$page."?\n";
	AreYouSure();
	
	print "Writing...\n";

	foreach ( $votes as $key => &$vote ) {
		$ret = themeList_SetScore($key, $vote['sum']);
		echo $key." = ".$vote['sum']." : $ret\n";
	}

	print "Done.\n";
}
else if ( $COMMAND === "finalize" ) {
	if ( count($argv) < 1 ) {
		print "Error: No count specified\n";
		exit(1);
	}

	$count = intval($argv[0]);
	if ( $count < 1 ) {
		print "Error: Invalid count:"+$count+"\n";
		exit(1);
	}

	echo "----------------------------------\n";

	$themes = themeList_GetByNode($EVENT_NODE);

	// Sort Themes by score
	$cmp = function($a, $b) {
	    if ($a['score'] == $b['score']) {
	        return 0;
	    }
	    return ($a['score'] > $b['score']) ? -1 : 1;
	};
	usort($themes, $cmp);

	$max_page = 0;
	$idx = 0;

	foreach ( $themes as &$theme ) {
		$theme['place'] = $idx;

		print $idx."\t".$theme['score']."\t".$theme['theme']." [".$theme['page']."]\n";

		if ( $theme['page'] > $max_page ) {
			$max_page = $theme['page'];
		}

		$idx++;
		if ( $idx === $count ) {
			echo "----------------------------------\n";
		}
	}

	print "\n*** WARNING ***\n\n";
	print "You are about to make the above $count themes in to the Final Round\n";
	AreYouSure();
	
	$new_themes = array_slice($themes, 0, $count);
	shuffle($new_themes);

	foreach ( $new_themes as &$theme ) {
//		print_r($theme);
		print $theme['place']."\t".$theme['id']."\t".$theme['score']."\t".$theme['theme']." [".$theme['page']."] {".$theme['idea']."} (".$theme['node'].")\n";
	}

	$new_page = $max_page+1;

	print "\n*** WARNING ***\n\n";
	print "Is this Randomization Good? This will become page ".($new_page).". Last chance to back out!!!!\n";
	AreYouSure();
	
	foreach ( $new_themes as &$theme ) {
		$ret = themeList_Add($theme['node'], $theme['idea'], $theme['theme'], $new_page );
	}

	echo "Done.\n";
}
else if ( $COMMAND === "simple-vote" ) {	
	if ( count($argv) < 1 ) {
		print "Error: No count specified\n";
		exit(1);
	}

	$pages = intval($argv[0]);
	if ( $pages < 1 ) {
		print "Error: Invalid page count:"+$pages+"\n";
		exit(1);
	}
	
	$themes_per_page = 10;
	
	$recv_count = $themes_per_page*$pages;
	
	$top_themes = themeIdea_GetTopScoring($EVENT_NODE,$recv_count);
	shuffle($top_themes);
	for($page=1; $page <= $pages; $page++)
	{
		$thispage = array_slice($top_themes,($page-1)*$themes_per_page, $themes_per_page);
		
		foreach($thispage as $idea)
		{
			print $idea['score']."\t".$idea['theme']." [$page]\n";
		}
		echo "----------------------------------\n";
	}

	print "\n*** WARNING ***\n\n";
	print "You are about to make the above theme voting rounds into pages\n";
	AreYouSure();

	for($page=1; $page <= $pages; $page++)
	{
		$thispage = array_slice($top_themes,($page-1)*$themes_per_page, $themes_per_page);
		foreach($thispage as $idea)
		{
			$ret = themeList_Add($idea['node'], $idea['id'], $idea['theme'], $page );
		}
	}


}
else {
	echo "Error: Unknown command \"$COMMAND\"\n";
	exit(1);
}
