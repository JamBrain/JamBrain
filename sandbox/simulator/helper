<?php
/*
	helper		Functions that provide utility functionality on top of the API or to provide other services.
	
*/



function RunMagic()
{
	Verbose("Kicking off cron magic.php task to update necessary values in the db.");
	exec("php ~/www/private/magic.php");
}



$event_admin_user = null;
$event_users = array(); // Only use for reference (e.g. getting usernames)
$event_user_lookup = array(); // Only use this as a source for user objects, and get them by reference.
$event_userids = array();

function RandomUserName()
{
	global $event_users;
	$i = random_int(1, count($event_users)) - 1;
	return $event_users[$i]["username"];
}


function LoadPreviousUsers()
{
	global $event_admin_user, $event_users;
	$f = OpenPreviousEventFile();
	$users=[];
	if($f === false) { return false; }
	VerboseAction("Loading users from previous event...");
	while(!feof($f))
	{
		$line = fgets($f);
		$start = substr(trim($line),0,1);
		if($start === false || $start == "#") { continue; }
		$parts = explode(":",$line,2);
		if(count($parts) != 2) { continue; }
		$u = trim($parts[0]);
		$p = trim($parts[1]);
		$users[] = User_Load($u,$p);
	}

	Verbose("Loaded ".count($users)." users.");

	$event_admin_user = array_shift($users);
	$event_users = $users;
	return true;
}


// Create an admin user and $usercount other users. Load users from last event if possible. Save users to this event's event file. 
// Churn some users out and create some fresh users. If there are more created users than needed users, preserve the full userlist but only use the tail end of it.
function Create_Users($usercount, $user_churn = 0)
{
	global $event_admin_user, $event_users, $event_user_lookup, $event_userids;
	LoadPreviousUsers();
	
	if($event_admin_user == null)
	{
		$event_admin_user = User_Create();
	}
	
	$created = 0;
	if(count($event_users) < $usercount)
	{
		VerboseAction("Not enough users to start event, creating some more users.");
	}
	while(count($event_users) < $usercount)
	{
		$event_users[] = User_Create();
		$created++;
	}
	if($created < $user_churn)
	{
		VerboseAction("Creating a few additional users to churn the userbase.");
	}
	while($created < $user_churn)
	{
		$event_users[] = User_Create();
		$created++;
	}
	
	// Save information about all users into a file
	$f = OpenEventFile();
	fwrite($f, "# For now, just spitting out event data in a semi human readable form.\n");
	fwrite($f, "# First line is Admin, rest of the lines are normal users.\n");
	fwrite($f, "# Each line is Username:Password\n");
	
	fwrite($f, $event_admin_user["username"] . ":" . $event_admin_user["password"] . "\n");

	if(count($event_users) > MAXKEEPUSERS)
	{
		$event_users = array_slice($event_users,-MAXKEEPUSERS);
	}
	
	foreach($event_users as $u)
	{
		if($u == null) continue; // Failed user creation - don't cause problems for subsequent runs.
		fwrite($f, $u["username"] . ":" . $u["password"] . "\n");	
	}

	fclose($f);
	
	// Now, select the set of users to use for this event and log them in.
	VerboseAction("Logging in users");
	if(!User_Login($event_admin_user))
	{
		return false;
	}
	
	$event_users = array_slice($event_users, -$usercount);
	
	$userids = [];
	foreach($event_users as $user)
	{
		if(!User_Login($user)) return false;
		$event_user_lookup[$user["username"]] = $user;
		$userids[] = $user["id"];
	}
	$event_userids = $userids;
	
	return true;
}


////
//// Common functions to assist in doing normal tasks in the site
////

function User_DataStructure($username, $password)
{
	$user = [
		"username" => $username,
		"password" => $password,
		"cookies" => array(),
		
		// Further info for tracking data this user has posted and interacted with.
		"joinedevent" => false,
		"game_node" => 0,
		"posts" => array(),
		"notes" => array(),
		"love" => array(),
		"rated_games" => array(),
		"postedimin" => false,
		"publishedgame" => false,
	];
	
	return $user;
}

function User_Login(&$user)
{
	if($user == null) { return false; }
	Verbose("Logging in user ". $user["username"] . "...");
	
	// Login the user
	$userid = ApiUserLogin($user);
	if(!$userid)
	{
		ReportError("Unable to login user ". $user["username"]);
		return false;	
	}
	
	$user["id"] = $userid;
	return true;
}

function User_Load($username, $password)
{
	$user = User_DataStructure($username, $password);
	return $user;
}

function User_Create()
{
	$username = GenerateRandomUsername();
	$password = $username;
	while(strlen($password) < 8) { $password .= "a"; }
	
	// Construct a user object
	$user = User_DataStructure($username, $password);
	
	// Determine if username is in use
	for($i = 0; $i < 20; $i++)
	{
		if(ApiUserHave($username))
		{
			// Username is in use, pick another
			$username = GenerateRandomUsername();
			$user["username"] = $username;
		}
		else
		{
			break;
		}
	}
	
	// API request to create user
	$email = $username . "@ludumdare.org";
	
	$mailsent = ApiUserCreate($email, $user);
	if(!$mailsent)
	{
		Verbose("Warning: User create didn't send mail. It's not strictly necessary to catch mail for this, but you probably don't have the mail catcher running.");
	}
	
	// Dig out the email auth token from the database and activate the user
	$userdata = user_GetByMail($email);
	$id = $userdata["id"];
	$key = $userdata["auth_key"];
	
	if(!ApiUserActivate($user, $id, $key))
	{
		ReportError("Error while creating user.");
		return null;
	}
	
		
	Verbose("Created user " . $username);
	
	return $user;
}

function User_EnsureJoined(&$user)
{
	global $event_nodeid;
	if(!$user["joinedevent"])
	{
		Verbose("Creating a game to join the event...");
		$user["game_node"] = ApiNodeAdd($user, $event_nodeid, "item/game");
		$user["joinedevent"] = true;
	}
}

function GetRandomRecentPost(&$user)
{
	Verbose("Fetching a random post...");
	$nodes = GetRecentEventPostNodes($user);
	if(count($nodes) == 0) return null;
	$i = random_int(1,count($nodes))-1;
	$data = ApiNodeGet($user, $nodes[$i]["id"]);
	if($data == null)
	{
		ReportError("Error fetching node " . $nodes[$i]);
		return null;
	}
	return $data[0];
}

function GetRandomTopGame(&$user)
{
	$gameid = 0;
	if(random_int(1,2) == 1)
	{
		Verbose("Fetching a random game via randomgames api...");
		// Use randomgames api
		$count = null;
		if(random_int(1,2) == 1) { $count = random_int(3,15); }
		$filter = ["compo","jam",null][random_int(0,2)];
		$games = ApiRandomGamesGet($user, $count, $filter);
		if($games === null)
		{
			ReportError("RandomGames API failed.");
			return null;
		}		
	
		// It's legitimate for this API to return no games before the voting period stops. 
		// In this case, fall back to the feed API below
		if(count($games) != 0)
		{
			// Sanity check: ensure our game is not present in the list.
			foreach($games as $game) 
			{
				if($game == $user['game_node']) { ReportError("RandomGames API should not be returning the user's own game."); }
			}
			
			$i = random_int(1,count($games))-1;
			$gameid = $games[$i];
		}
	} 
	
	if($gameid == 0) 
	{
		Verbose("Fetching a random game via feed...");
		// Use feed
		$nodes = GetTopEventGameNodes($user);
		if(count($nodes) == 0) return null;
		$i = random_int(1,count($nodes))-1;
		$gameid = $nodes[$i]["id"];
	}
	
	$data = ApiNodeGet($user, $gameid);
	if($data == null)
	{
		ReportError("Error fetching node " . $gameid);
		return null;
	}
	return $data[0];
}

function GetVoteGames(&$user)
{
	if(random_int(1,2) == 1)
	{
		return GetTopGames($user);
	} else {
		Verbose("Fetching games to rate from randomgames api...");
		$games = ApiRandomGamesGet($user, 15);
		if($games === null)
		{
			ReportError("Failed to get random games");
		}
		$out = [];
		foreach($games as $game)
		{
			$out[] = ["id" => $game];
		}
		return $out;
	}
}

function GetTopGames(&$user)
{
	Verbose("Reading over the top games...");
	$nodes = GetTopEventGameNodes($user);
	return GetNodesForFeed($user, $nodes);
}

function GetRecentEventPosts(&$user)
{
	Verbose("Reading over the recent posts...");
	$nodes = GetRecentEventPostNodes($user);
	return GetNodesForFeed($user, $nodes);
}

function WalkFeedId(&$feed, $key) { $feed = $feed["id"]; }

function GetNodesForFeed(&$user, $feed)
{
	if(count($feed) == 0) return [];
	$fullnodes = [];
	$chunks = array_chunk($feed, 30);
	foreach($chunks as $c)
	{
		array_walk($c, "WalkFeedId");
		$idjoin = implode("+",$c);
		$data = ApiNodeGet($user, $idjoin);
		if($data != null)
		{
			foreach($data as $n)
			{
				$fullnodes[$n["id"]] = $n;
			}
		}
	}
	$outdata = [];
	foreach($feed as $n)
	{
		$data = $fullnodes[$n["id"]];
		if($data != null) { $outdata[] = $data; }
	}
	if(count($outdata) == 0) return null;
	return $outdata;
}

function GetRecentEventPostNodes(&$user, $count = 60)
{
	global $event_nodeid;
	$maxpage = 30;
	$have = 0;
	$out = [];
	while($have < $count)
	{
		$fetch = $count - $have;
		if($fetch > $maxpage) $fetch = $maxpage;
		
		$newdata = ApiNodeFeed($user, $event_nodeid, "all", "post", $fetch, $have);
		if($newdata === null)
		{
			ReportError("Error getting feed.");
		}
		else
		{
			$out = array_merge($out, $newdata);
		}
		$have += $fetch;
	}
	
	if(count($out) == 0) return null;
	return $out;
}

function GetTopEventGameNodes(&$user, $count = 60)
{
	global $event_nodeid;
	$maxpage = 30;
	$have = 0;
	$out = [];
	while($have < $count)
	{
		$fetch = $count - $have;
		if($fetch > $maxpage) $fetch = $maxpage;
		
		$newdata = ApiNodeFeed($user, $event_nodeid, "smart+parent", "item/game/compo+jam", $fetch, $have);
		if($newdata === null)
		{
			ReportError("Error getting feed.");
		}
		else
		{
			$out = array_merge($out, $newdata);
		}
		$have += $fetch;
	}
	
	if(count($out) == 0) return null;
	return $out;
}

function GetNodeComments(&$user, $nodeid)
{
	Verbose("Reading Comments for node ".$nodeid."...");
	$notes = ApiNoteGet($user, $nodeid);
	if($notes === null)
	{
		ReportError("Failed to get notes for node ".$nodeid);
	}
	return $notes;
}

function CreatePost(&$user, $title, $body)
{
	User_EnsureJoined($user);
	
	Verbose("Creating a new post.");
	$nodeid = ApiNodeAdd($user, $user["game_node"], "post");
	if($nodeid == null)
	{
		ReportError("Failure to add new post!");
		return;
	}	
	if(!ApiNodeUpdate($user, $nodeid, $title, $body))
	{
		ReportError("Failure to update post being created.");
		return;
	}
	if(!ApiNodePublish($user, $nodeid))
	{
		ReportError("Failure to publish post being created.");
		return;
	}
	$user["posts"][] = $nodeid; // Track post for later use.
	return $nodeid;
}

function CreateComment(&$user, $nodeid, $body, $anonymous = null)
{
	User_EnsureJoined($user);
	$anon = $anonymous ? "n anonymous": "";
	Verbose("Posting a" . $anon. " comment to node " . $nodeid);
	$id = ApiNoteAdd($user, $nodeid, $body, $anonymous);
	if(!$id)
	{
		ReportError("Failed to add comment");
		return null;
	}
	$user["notes"][] = [ "Node" => $nodeid, "Note" => $id ];
}

function LikeNode(&$user, $nodeid)
{
	// If we haven't already, add a like to this node. 
	if(array_key_exists($nodeid, $user["love"])) return;

	Verbose("Add like for Node " . $nodeid);
	if(!ApiNodeLoveAdd($user, $nodeid))
	{
		ReportError("Error adding node love for ".$nodeid);
		return;
	}
	$user["love"][] = $nodeid;
}

function LikeComment(&$user, $commentid)
{
	// If we haven't already, add a like to this comment
	if(array_key_exists(-$commentid, $user["love"])) return;
	
	Verbose("Add like for Note " . $commentid);
	if(!ApiNoteLoveAdd($user, $commentid))
	{
		ReportError("Error adding note love for ".$commentid);
		return;
	}
	$user["love"][] = -$commentid;
}

function UnlikeRandom(&$user)
{
	$count = count($user["love"]);
	if($count < 1) return;
	
	$item = random_int(1,$count)-1;
	$remove = $user["love"][$item];
	if($remove == null) { print_r($user); }
	if($item != ($count-1)) $user["love"][$item] = $user["love"][$count-1];
	unset($user["love"][$count-1]);
	$user["love"] = array_values($user["love"]); // Reindex for good measure.
	
	RemoveLike($user, $remove);
}

function RemoveLike(&$user, $thing)
{
	// Positive numbers = node love, Negative numbers = note love
	if($thing < 0)
	{
		$thing = -$thing;
		Verbose("Remove note love ". $thing);
		if(!ApiNoteLoveRemove($user, $thing))
		{
			ReportError("Failed to remove note love for ". $thing);
		}
	}
	else
	{
		Verbose("Remove node love ". $thing);
		if(!ApiNodeLoveRemove($user, $thing))
		{
			ReportError("Failed to remove node love for ". $thing);
		}		
	}
}

function ModifyGame(&$user, $newTitle, $newBody)
{
	User_EnsureJoined($user);
	Verbose("Modifying game node information...");
	
	if(!ApiNodeUpdate($user, $user["game_node"], $newTitle, $newBody))
	{
		ReportError("Failure to update game.");
		return;
	}
}

function PublishGame(&$user)
{
	User_EnsureJoined($user);
	// Bail early if user already published game.
	if($user["publishedgame"]) return;
	
	Verbose("Publishing game node ".$user["game_node"]);
	
	// Transform game into compo or jam game
	$newtype = ["item/game/compo","item/game/jam"][random_int(0,1)];
	if(!ApiNodeTransform($user, $user["game_node"], $newtype))
	{
		ReportError("Failed to transform game node to " . $newtype);
	}
	
	// Enable opt-outs
	if(random_int(1,3) == 1) 
	{
		// Future: Determine possible opt-outs and opt out of one or more of them.
	}
	
	// Enable anonymous comments
	if(random_int(1,3) == 1) 
	{	
		Verbose("Enabling anonymous comments");
		if(!ApiNodeMetaAdd($user, $user["game_node"], 'allow-anonymous-comments', '1')) ReportError("Unable to enable anonymous comments meta.");
	}	
	
	
	
	// Publish!
	if(!ApiNodePublish($user, $user["game_node"]))
	{
		ReportError("Failed to publish game!");
	}
	
	$user["publishedgame"] = true;
	
	RunMagic();
}


function AddMissingTags()
{
	global $tagsId;

	VerboseAction("Checking Tags");

	// Platform tags
	$defaults = [
		"platform" => ["Source Code", "Windows", "Linux", "Html5 (Web)", "macOS", "Android", "Gameboy", "Toaster"],
		"genre" => ["Arcade", "FPS", "Strategy", "RPG", "Puzzle"],		
	];
	$warnings = [
		"Linux" => "If you used the default Unity export options for Linux, you may want to re-export with the 'Universal' preset to make the game playable by more Linux users.",
		"Toaster" => "Please remember to warn your users to unplug the appliance while inserting and removing games"
	];
	
	// Enumerate existing tags in category.
	function LoadTagsForCategory($catid)
	{
		$tag = node_GetIdByParentType($catid,"tag");

		// Get complete nodes for the tags.
		if(count($tag) > 0)
		{
			$nodes = [];
			foreach(nodeComplete_GetById($tag) as $n){
				$nodes += array($n["name"] => $n);

			}
			return $nodes;
		}
		return false;
	}

	function LoadTagCategories($tagsId){
		$category_ids = node_GetIdByParentType($tagsId, "group", "tags", null);
		$categories = [];
		foreach($category_ids as $c)
		{
			$categories += array(node_GetById($c)["name"] => node_GetById($c));
		}
		return $categories;
	}

	function SetWarning($id, $warning)
	{
		Verbose("\t\tSet Warning for ". $id);
		nodeMeta_AddOrphan($id, 0, SH_SCOPE_PUBLIC, 'tag-warning', $warning);
	}

	$categories = LoadTagCategories($tagsId);
	

	foreach ($defaults as $default_cat => $default_tags)
	{
		// see if the category we want to add already exists
		$catid = false;
		if (array_key_exists($default_cat, $categories)) {
			$catid = $categories[$default_cat]["id"];
			Verbose("Found category ".$default_cat);
		}
		else { 
			// If we couldn't find it, the add it
			$catid = node_Add($tagsId, 0, 'group', 'tags', '', coreSlugify_Name($default_cat), $default_cat, '');
			node_Publish($catid, true);
			Verbose("Added category ".$default_cat);
		}
		
		$tags = LoadTagsForCategory($catid);
		foreach($default_tags as $default_tag) {

			// see if the tag we want to add already exists
			$tagid = false;
			if (count($tags) > 0){
				if (array_key_exists($default_tag, $tags)){
					$tagid = $tags[$default_tag]["id"];
					Verbose("\tFound tag ".$default_tag);
				}
			}

			// If we couldn't find it, the add it
			if(!$tagid) {
				$tagid = node_Add($catid, 0, 'tag', $default_cat, '', coreSlugify_Name($default_tag), $default_tag, '');
				node_Publish($tagid, true);
				Verbose("\tAdded tag ".$default_tag);
			}

			// Add any warnings
			if (array_key_exists($default_tag,$warnings)){
				SetWarning($tagid, $warnings[$default_tag]);
			}


		}
	}
}
